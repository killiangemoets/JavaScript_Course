'use strict';

// let map, mapEvent;

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10); //Just to fix a random id
  clicks = 0;

  constructor(coords, distance, duration) {
    // this.date = ...
    // this.id = ...
    this.coords = coords; //[lat, lng]
    this.distance = distance; //in km
    this.duration = duration; //in min
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`; //getMonth returns a number between 0 and 11 and getDate return the day
  }

  click() {
    this.clicks++;
  }
}

class Running extends Workout {
  type = 'running';
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }

  calcPace() {
    //min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}
class Cycling extends Workout {
  type = 'cycling';
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();
    this._setDescription();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycling1 = new Cycling([39, -12], 27, 95, 523);
// console.log(run1);
// console.log(cycling1);

/////////////////////////////////////////////
// APPLICATION ARCHITECTURE
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class App {
  #map;
  #mapZoomLevel = 12;
  #mapEvent;
  #workouts = [];

  //The constructor method is called immediately when a new object is created from this class
  constructor() {
    //// GET USER'S POSITION
    this._getPosition();

    //// GET DATA FROM LOCAL STORAGE
    this._getLocalStorage();

    //// ATTACH EVENT HANDLERS:

    form.addEventListener('submit', this._newWorkout.bind(this)); //Here the this keyword will point to form and not the App object so we need to fix that using bind

    inputType.addEventListener('change', this._toggleElevationField);

    //Move to Marker On Click
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  _getPosition() {
    // getCurrentPosition take as an input 2 Callback Functions:
    // - The function that will be called on success, this function is called with the Position Parameter
    // - The Error Callback, which can be called with the error itself
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this), //We bind the this keyword to whatever we need (in this care it's "this")
        function () {
          alert('Could not get your position');
        }
      );

    console.log(this.#workouts); // workouts haven't been restored yet
  }

  _loadMap(position) {
    console.log(this.#workouts); // workouts have been restored yet
    console.log(position);
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(latitude, longitude);
    console.log(`https://www.google.be/maps/@${latitude},${longitude}`);

    const coords = [latitude, longitude];
    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);
    console.log(this.#map);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    //Handling click on map:
    //This "on" method is not coming from JavaScript itself but it's coming from the Leaflet library
    //The map object is in fact an object that was generated by leaflet so it's a special objects with a couple of methods and properties on it
    this.#map.on('click', this._showForm.bind(this)); //Again the this keyword points to the map so the solution is to bind the this keyword

    //We rend the markers here bc at this point the map is available
    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });

    this.#map.setView(coords, this.#mapZoomLevel);
  }

  _showForm(mapE) {
    form.classList.remove('hidden');
    inputDistance.focus();
    this.#mapEvent = mapE; //We do it bc we don't need the mapEvent right here in the function but we need it later outside of this function
  }

  // Hide form + clear input fields
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }

  _toggleElevationField() {
    //We need the closest parent of inputElevation
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp)); //the every method return true only if the value was true for all of them
    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    e.preventDefault();
    console.log(this);

    // Get data from the form
    const type = inputType.value;
    const distance = +inputDistance.value; // We add a "+" to convert it to a number
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    console.log(this.#mapEvent);
    let workout;

    // Check if data is valid

    // If activity running, create running object
    if (type === 'running') {
      const cadence = +inputCadence.value;
      // Check if data is valid
      //We will use a guard clause:
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert('Inputs have to be positive numbers');

      workout = new Running([lat, lng], distance, duration, cadence);
    }

    // If activity cycling, create cycling object
    if (type === 'cycling') {
      const elevation = +inputElevation.value;
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(elevation)
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert('Inputs have to be positive numbers');

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // Add new object to workout array
    this.#workouts.push(workout);
    console.log(workout);

    // Render workout on map as marker
    this._renderWorkoutMarker(workout);

    // Render workout on list
    this._renderWorkout(workout);

    // Hide form + lear input fields
    this._hideForm();

    // Set local storage to all workouts
    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    //AddTo(map) add the marker to the map
    // In bindPopup we can just specify a string or we can create a brand new popup object which will then contains a couple of options
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : ' üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
      )
      .openPopup();
  }

  _renderWorkout(workout) {
    let html = `
    <li class="workout workout--${workout.type}" data-id="${workout.id}">
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : ' üö¥‚Äç‚ôÄÔ∏è'
            }</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <span class="workout__unit">min</span>
          </div>    
    `;

    if (workout.type === 'running')
      html += `
    <div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.pace.toFixed(1)}</span>
      <span class="workout__unit">min/km</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">ü¶∂üèº</span>
      <span class="workout__value">${workout.cadence}</span>
      <span class="workout__unit">spm</span>
    </div>
  </li>
  `;

    if (workout.type === 'cycling')
      html += `
    <div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.speed.toFixed(1)}</span>
      <span class="workout__unit">km/h</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚õ∞</span>
      <span class="workout__value">${workout.elevationGain}</span>
      <span class="workout__unit">m</span>
    </div>
  </li>
  `;

    form.insertAdjacentHTML('afterend', html);
  }

  _moveToPopup(e) {
    console.log(e);
    const workoutEl = e.target.closest('.workout');
    console.log(workoutEl);

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );
    console.log(workout);

    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // Using the public interface
    workout.click();
  }

  _setLocalStorage() {
    // localStorage is an API that the browser provides for us and that we can use
    // For the first argument we have to give it a name/a key and the second argument needs to be a string that we want to store and will be associated with the key we gave as the first argument
    // We can convert on object to a string by using JSON.stringify()
    localStorage.setItem('workouts', JSON.stringify(this.#workouts)); //We are setting all the workouts to local storage
  }

  _getLocalStorage() {
    // We do the opposit, we get the data from the local storage
    // We use to the opposite of JSON.stringify()to convert the string to an object
    const data = JSON.parse(localStorage.getItem('workouts'));
    console.log(data);

    // HOWEVER by doing that we lose the prototype chain... The new objects that we recovered from the local storage are now just regular objects
    // A solution could be to loop over this data and restore the objects by creating a new object using the class based on the date coming from the local storage

    if (!data) return;

    // We restore the #workouts array
    this.#workouts = data;

    // Let's take all the workouts and render them in the list
    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
    //NOTE : We cannot rend the markers here bc at this point the map didn't load yet

    console.log('Hey there!');
  }

  reset() {
    localStorage.removeItem('workouts');

    //We reload the page progammatically:
    location.reload(); //location, is a big objects that contains a lot of methods and propeties in the browser (and one of the methods is the ability to reload the page)
  }
}

const app = new App();
console.log(app);
// We want this method to be executed as the page load but to do this, there is a cleaner way: putting this method inside of the constructor method.
// app._getPosition();
